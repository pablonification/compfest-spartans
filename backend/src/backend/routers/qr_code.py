"""QR Code management router."""

import logging
from datetime import datetime, timezone
from typing import List, Optional
from fastapi import APIRouter, HTTPException, status, Depends, Query

try:
    from ..services.qr_code_service import get_qr_code_service
    from ..models.qr_code import QRCodeCreate, QRCodeResponse, QRCodeStatus
    from ..models.common import PyObjectId
    QR_SERVICE_AVAILABLE = True
except ImportError as e:
    logging.warning(f"QR Code service dependencies not available: {e}")
    QR_SERVICE_AVAILABLE = False
    # Create mock classes for when dependencies are missing
    class QRCodeCreate:
        pass
    class QRCodeResponse:
        pass
    class QRCodeStatus:
        ACTIVE = "active"
        INACTIVE = "inactive"
        EXPIRED = "expired"
        USED = "used"

from ..routers.auth import verify_token

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/api/qr", tags=["qr_code"])

# Initialize service only if available
qr_code_service = get_qr_code_service() if QR_SERVICE_AVAILABLE else None


@router.post("/generate", response_model=QRCodeResponse, status_code=status.HTTP_201_CREATED)
async def generate_qr_code(
    qr_data: QRCodeCreate,
    payload: dict = Depends(verify_token),
) -> QRCodeResponse:
    """Generate a new QR code (Admin only)."""
    if not QR_SERVICE_AVAILABLE:
        raise HTTPException(
            status_code=503,
            detail="QR Code service is not available. Please ensure all dependencies are installed."
        )

    try:
        user_email = payload.get("email")
        user_id = payload.get("sub")  # User ID from JWT

        if not user_email or not user_id:
            raise HTTPException(status_code=401, detail="Invalid user token")

        # Generate QR code
        qr_response = await qr_code_service.generate_qr_code(
            admin_user_id=user_id,
            qr_data=qr_data
        )

        logger.info(f"QR code generated by user {user_email}: {qr_response.id}")
        return qr_response

    except Exception as exc:
        logger.error(f"Failed to generate QR code: {exc}")
        raise HTTPException(status_code=500, detail="Failed to generate QR code")


@router.post("/validate", status_code=status.HTTP_200_OK)
async def validate_qr_code(
    token: str = Query(..., description="QR code token to validate"),
    payload: dict = Depends(verify_token),
) -> dict:
    """Validate a QR code token."""
    if not QR_SERVICE_AVAILABLE:
        raise HTTPException(
            status_code=503,
            detail="QR Code service is not available. Please ensure all dependencies are installed."
        )

    try:
        user_email = payload.get("email")
        user_id = payload.get("sub")

        if not user_email or not user_id:
            raise HTTPException(status_code=401, detail="Invalid user token")

        # Validate QR code
        validation_result = await qr_code_service.validate_qr_code(
            token=token,
            user_id=user_id
        )

        logger.info(f"QR code validation for user {user_email}: {validation_result}")

        if validation_result["valid"]:
            return {
                "valid": True,
                "qr_id": validation_result["qr_id"],
                "remaining_uses": validation_result["remaining_uses"],
                "message": "QR code is valid"
            }
        else:
            return {
                "valid": False,
                "reason": validation_result["reason"],
                "message": "QR code is invalid"
            }

    except Exception as exc:
        logger.error(f"Failed to validate QR code: {exc}")
        raise HTTPException(status_code=500, detail="Failed to validate QR code")


@router.get("/list", response_model=List[QRCodeResponse])
async def get_qr_codes(
    skip: int = Query(0, ge=0, description="Number of QR codes to skip"),
    limit: int = Query(50, ge=1, le=100, description="Maximum number of QR codes to return"),
    payload: dict = Depends(verify_token),
) -> List[QRCodeResponse]:
    """Get QR codes generated by the authenticated admin."""
    if not QR_SERVICE_AVAILABLE:
        raise HTTPException(
            status_code=503,
            detail="QR Code service is not available. Please ensure all dependencies are installed."
        )

    try:
        user_email = payload.get("email")
        user_id = payload.get("sub")

        if not user_email or not user_id:
            raise HTTPException(status_code=401, detail="Invalid user token")

        # Get QR codes
        qr_codes = await qr_code_service.get_qr_codes(
            admin_user_id=user_id,
            skip=skip,
            limit=limit
        )

        logger.info(f"Retrieved {len(qr_codes)} QR codes for user {user_email}")
        return qr_codes

    except Exception as exc:
        logger.error(f"Failed to get QR codes: {exc}")
        raise HTTPException(status_code=500, detail="Failed to retrieve QR codes")


@router.put("/{qr_id}/deactivate", status_code=status.HTTP_200_OK)
async def deactivate_qr_code(
    qr_id: str,
    payload: dict = Depends(verify_token),
) -> dict:
    """Deactivate a QR code (Admin only)."""
    if not QR_SERVICE_AVAILABLE:
        raise HTTPException(
            status_code=503,
            detail="QR Code service is not available. Please ensure all dependencies are installed."
        )

    try:
        user_email = payload.get("email")
        user_id = payload.get("sub")

        if not user_email or not user_id:
            raise HTTPException(status_code=401, detail="Invalid user token")

        # Deactivate QR code
        success = await qr_code_service.deactivate_qr_code(
            qr_id=qr_id,
            admin_user_id=user_id
        )

        if not success:
            raise HTTPException(status_code=404, detail="QR code not found or access denied")

        logger.info(f"QR code {qr_id} deactivated by user {user_email}")
        return {"message": "QR code deactivated successfully"}

    except HTTPException:
        raise
    except Exception as exc:
        logger.error(f"Failed to deactivate QR code: {exc}")
        raise HTTPException(status_code=500, detail="Failed to deactivate QR code")


@router.get("/stats", status_code=status.HTTP_200_OK)
async def get_qr_code_stats(
    payload: dict = Depends(verify_token),
) -> dict:
    """Get QR code statistics for the authenticated admin."""
    if not QR_SERVICE_AVAILABLE:
        raise HTTPException(
            status_code=503,
            detail="QR Code service is not available. Please ensure all dependencies are installed."
        )

    try:
        user_email = payload.get("email")
        user_id = payload.get("sub")

        if not user_email or not user_id:
            raise HTTPException(status_code=401, detail="Invalid user token")

        # Get all QR codes for this admin
        qr_codes = await qr_code_service.get_qr_codes(
            admin_user_id=user_id,
            skip=0,
            limit=1000  # Get all for stats
        )

        # Calculate statistics
        total_qr = len(qr_codes)
        active_qr = sum(1 for qr in qr_codes if qr.status == QRCodeStatus.ACTIVE)
        expired_qr = sum(1 for qr in qr_codes if qr.status == QRCodeStatus.EXPIRED)
        used_qr = sum(1 for qr in qr_codes if qr.status == QRCodeStatus.USED)
        inactive_qr = sum(1 for qr in qr_codes if qr.status == QRCodeStatus.INACTIVE)

        total_usage = sum(qr.usage_count for qr in qr_codes)

        # Get recently generated QR codes (last 24 hours)
        now = datetime.now(timezone.utc)
        yesterday = now.replace(hour=0, minute=0, second=0, microsecond=0)
        recent_qr = sum(1 for qr in qr_codes if qr.generated_at >= yesterday)

        stats = {
            "total_qr_codes": total_qr,
            "active_qr_codes": active_qr,
            "expired_qr_codes": expired_qr,
            "used_qr_codes": used_qr,
            "inactive_qr_codes": inactive_qr,
            "total_usage_count": total_usage,
            "recent_qr_codes": recent_qr,
            "generated_today": recent_qr
        }

        logger.info(f"QR code stats for user {user_email}: {stats}")
        return stats

    except Exception as exc:
        logger.error(f"Failed to get QR code stats: {exc}")
        raise HTTPException(status_code=500, detail="Failed to retrieve QR code statistics")


@router.post("/cleanup", status_code=status.HTTP_200_OK)
async def cleanup_expired_qr_codes(
    payload: dict = Depends(verify_token),
) -> dict:
    """Clean up expired QR codes (Admin only)."""
    if not QR_SERVICE_AVAILABLE:
        raise HTTPException(
            status_code=503,
            detail="QR Code service is not available. Please ensure all dependencies are installed."
        )

    try:
        user_email = payload.get("email")

        if not user_email:
            raise HTTPException(status_code=401, detail="Invalid user token")

        # Cleanup expired QR codes
        cleaned_count = await qr_code_service.cleanup_expired_qr_codes()

        logger.info(f"Cleaned up {cleaned_count} expired QR codes")
        return {
            "message": f"Successfully cleaned up {cleaned_count} expired QR codes",
            "cleaned_count": cleaned_count
        }

    except Exception as exc:
        logger.error(f"Failed to cleanup expired QR codes: {exc}")
        raise HTTPException(status_code=500, detail="Failed to cleanup expired QR codes")
