### SmartBin Cursor Rules

These rules are enforced across the repo to avoid recurring issues, especially MongoDB connectivity and points reset in the UI.

## MongoDB Connection Policy (MANDATORY)
- All MongoDB access MUST go through `backend/src/backend/db/mongo.py`.
- DO NOT import or use `client`/`mongo_db` directly from other modules.
- ALWAYS use `ensure_connection()` before any DB operation.
- Initialize and close connections only via FastAPI lifespan in `backend/src/backend/main.py`.
- Use robust pooling and timeouts to avoid connection drop stalls.

### Canonical MongoDB Client (use verbatim)
```python
# backend/src/backend/db/mongo.py
from motor.motor_asyncio import AsyncIOMotorClient, AsyncIOMotorDatabase
from pymongo.server_api import ServerApi
from ..core.config import get_settings
import asyncio
import logging
import random

logger = logging.getLogger(__name__)

client: AsyncIOMotorClient | None = None
mongo_db: AsyncIOMotorDatabase | None = None

async def connect_to_mongo() -> None:
    global client, mongo_db
    if client is not None:
        return
    settings = get_settings()
    client = AsyncIOMotorClient(
        settings.MONGODB_URI,               # mongodb+srv://.../?retryWrites=true&w=majority&appName=SmartBin
        server_api=ServerApi('1'),
        maxPoolSize=10,
        minPoolSize=1,
        maxIdleTimeMS=30000,
        connectTimeoutMS=10000,
        serverSelectionTimeoutMS=10000,
        heartbeatFrequencyMS=10000,
    )
    await client.admin.command('ping')
    mongo_db = client[settings.MONGODB_DB_NAME]
    logger.info("✅ MongoDB connected. DB=%s", settings.MONGODB_DB_NAME)

async def close_mongo_connection() -> None:
    global client
    if client is not None:
        client.close()
        client = None

async def ensure_connection(max_retries: int = 3) -> AsyncIOMotorDatabase:
    global mongo_db, client
    for attempt in range(1, max_retries + 1):
        try:
            if client is None or mongo_db is None:
                await connect_to_mongo()
            await client.admin.command('ping')
            return mongo_db
        except Exception as e:
            wait = min(2 ** attempt, 8) + random.random()
            logger.warning(
                "Mongo ping failed (attempt %d/%d): %s. Retrying in %.1fs",
                attempt, max_retries, e, wait
            )
            await asyncio.sleep(wait)
            client = None
            mongo_db = None
    raise RuntimeError("MongoDB connection unavailable after retries")

def get_database() -> AsyncIOMotorDatabase:
    if mongo_db is None:
        raise RuntimeError("MongoDB not initialized. Call connect_to_mongo() first.")
    return mongo_db
```

### FastAPI Lifespan (required)
```python
# backend/src/backend/main.py
from contextlib import asynccontextmanager
from .db.mongo import connect_to_mongo, close_mongo_connection

@asynccontextmanager
async def lifespan(app):
    await connect_to_mongo()
    yield
    await close_mongo_connection()
```

### Usage Pattern (allowed vs forbidden)
```python
# ✅ Allowed: always obtain DB via ensure_connection()
from ..db.mongo import ensure_connection

async def some_operation():
    db = await ensure_connection()
    await db['collection'].insert_one({...})
```
```python
# ❌ Forbidden: using mongo_db/client directly
from ..db.mongo import mongo_db  # Do not do this
```

### Environment
- Required env vars for backend container:
  - `MONGODB_URI` (Atlas SRV, include `retryWrites=true&w=majority&appName=SmartBin`)
  - `MONGODB_DB_NAME` (e.g., `smartbin`)
- Do NOT hardcode credentials. Use Docker Compose env or secrets.

### Error Handling and Resilience
- If a DB write fails during scan/points update, DO NOT return `total_points=0`.
  - Prefer returning `total_points=None` or omitting the field.
  - Frontend must ignore zero/regressive totals.
- Log DB failures with context (no secrets) and continue non-critical flows.

## Reward/Points Policy
- `reward_service.add_points` MUST:
  - Use `ensure_connection()`
  - Use `upsert=True` when increasing points
  - Return the final points from DB if available; if not available, DO NOT return 0 unless user truly has 0.

### Canonical add_points shape
```python
# backend/src/backend/services/reward_service.py (key points)
from ..db.mongo import ensure_connection

async def add_points(email: str, points: int, bottle_count: int = 1) -> int:
    db = await ensure_connection()
    collection = db["users"]
    result = await collection.find_one_and_update(
        {"email": email},
        {"$inc": {"points": points}},
        return_document=True,
        upsert=True,
    )
    if result is None:
        result = await collection.find_one({"email": email})
    return int(result.get("points", 0)) if result else 0
```

## Frontend Points Update Guard
- Never overwrite points with a lower number (especially 0) from a flaky response.
- Only update when the new total is a valid non-decreasing number.

```javascript
// Example guard when handling scan result or summary
const newTotal = data?.total_points;
if (typeof newTotal === 'number' && newTotal >= (user?.points ?? 0)) {
  updateUser({ ...user, points: newTotal });
} // else ignore
```

## Health/Readiness
- Health endpoint should `ping` MongoDB; readiness is 200 only if ping succeeds.

## PR Checklist (must pass)
- [ ] All DB access via `ensure_connection()`
- [ ] No imports of `mongo_db`/`client` outside `db/mongo.py`
- [ ] Frontend does not regress user points when backend returns 0/None
- [ ] Env vars documented and used (no hardcoded URIs)
- [ ] Logs have no secrets

